#!/usr/bin/env python
import re
import csv
import sys
from docopt import docopt

__doc__ = """Applies the given mutation file to the gene database.
Usage:
    ./mutation_missense.py MUTATION_FILE [--basesize=BASESIZE] [--datafile=DATAFILE] [--output=OUTPUT]
        [--encoding=ENCODING] [-v --verbose] [-h --help]
    MUTATION_FILE
        The filename for the file containing the mutations to be applied.
        Must be in the format: "NAME;CODE;MUTATION"
        Mutations can be in the formats (where ** is the position, A and G are proteins):
        - **A>G
        - c.**delA
        - ns**A>G
        - c.**_**insAAGG
    --basesize=BASESIZE
        The number of bases from each gene to be obtained, mutated and exported. [default: 90]
    --datafile=DATAFILE
        The name of the file that contains all genes. [default: All_COSMIC_Genes.fasta]
    --encoding=ENCODING
        Encoding to use when reading files. [default: utf-8]
    --output=OUTPUT
        The output filename [default: mutated.csv]
    Example:
    ./mutation_missense.py mutations1.csv --basesize=90
"""


class MismatchAction(Exception):
    pass


class InvalidActionFormat(Exception):
    pass


REPLACE_PAT = re.compile(r'(\d+)([ACGT])\>([ACGT])', flags=re.I)
DELETE_PAT = re.compile(r'c\.(\d+)del([ACGT])', flags=re.I)
NSREPLACE_PAT = re.compile(r'ns(\d+)([ACGT])\>([ACGT])', flags=re.I)
INSERTMANY_PAT = re.compile(r'c\.(\d+)_\d+ins([ACGT]+)', flags=re.I)
DELETEMANY_PAT = re.compile(r'c\.(\d+)_(\d+)del\w+', flags=re.I)
NSMULTIPLE = 3


TYPE_PATTERNS = [
    ('rep', REPLACE_PAT),
    ('del', DELETE_PAT),
    ('ns', NSREPLACE_PAT),
    ('insm', INSERTMANY_PAT),
    ('delm', DELETEMANY_PAT),
]


def transform(base, action):
    """Performs a single transformation to the base sequence.
    :param base: The string containing the full or partial sequence.
    :param actions: A string containing an action represents them.
    An example of an action format: 10A>T
    This means that the protein A in position 10 will be transformed to T.
    Returns the transformed base sequence.
    Raises InvalidActionFormat if action is not in correct format and MismatchAction if protein in given position
    is different than specified by action.
    """
    assert isinstance(base, str) and isinstance(action, str)

    # Check what type is it
    position = pfrom = pto = ''
    limit_to = 0

    for typ, pat in TYPE_PATTERNS:
        match = pat.match(action.lower())
        if not match:
            continue
        if typ == 'rep':
            position, pfrom, pto = match.groups()
        elif typ == 'del':
            position, pfrom = match.groups()
        elif typ == 'ns':
            position, pfrom, pto = match.groups()
            position = int(position)
            # Next multiple of NSMULTIPLE:
            limit_to = ((position + NSMULTIPLE - 1) // NSMULTIPLE) * NSMULTIPLE
        elif typ == 'insm':
            # Insert many: particular implementation
            position, pto = match.groups()
            position = int(position)
            return base[:position - 1] + pto.lower() + base[position - 1:]
        elif typ == 'delm':
            # Delete many: particular implementation
            position, positionto = match.groups()
            position = int(position)
            positionto = int(positionto)
            return base[:position - 1] + base[positionto:]

        break
    else:
        raise InvalidActionFormat(action)

    # The following code is only for actions that are single-base

    position = int(position)  # positions are 1-indexed
    try:
        if base[position - 1] != pfrom:
            raise MismatchAction()
    except IndexError:
        return base

    base = base[:position - 1] + pto + base[position:]
    return base[:limit_to] if limit_to else base


def main(arguments):
    basesize = int(arguments['--basesize'])
    encoding = arguments['--encoding']
    verbose = arguments['-v'] or arguments['--verbose']

    with open(arguments['--datafile'], 'rb') as data_file, \
            open(arguments['MUTATION_FILE'], 'r', encoding=encoding) as input_file, \
            open(arguments['--output'], 'w', newline='', encoding=encoding) as output_file:

        sys.stderr.write('Indexing data file {}...\n'.format(data_file.name))
        data_index = {}
        byte_pos = 0
        for line in data_file:
            byte_pos += len(line)
            if line.startswith(b'>'):
                line = line.decode(encoding)
                name, code = line.strip('\r\n\t>').split(' ')[:2]
                if '_' in name or '_' in code:
                    continue  # Ignore codes with "_" in it
                key = (name, code)
                data_index.setdefault(key, byte_pos)  # points to the beginning of the bases sequence
        sys.stderr.write('{} genes indexed.\n'.format(len(data_index)))

        sys.stderr.write('Processing mutation file {}...\n'.format(input_file.name))
        writer = csv.writer(output_file, dialect='excel')
        reader = csv.reader(input_file, delimiter=';')
        deduplicate = set()
        mutation_count = {}
        for lineno, cols in enumerate(reader, start=1):
            cols = tuple(cols)
            if cols in deduplicate:
                if verbose:
                    sys.stderr.write('[WARN] Line {}: ignored (repeated)\n'.format(lineno))
                continue
            deduplicate.add(cols)

            if len(cols) < 3:
                if cols and verbose:
                    sys.stderr.write('[WARN] Line {}: ignored (too few columns)\n'.format(lineno))
                continue

            key = (cols[0], cols[1].split('>')[0])  # Ignore what's ahead of '>'
            if key not in data_index:
                sys.stderr.write('[WARN] Line {}: gene not found: {};{}\n'.format(lineno, *key))
                continue

            data_file.seek(data_index[key])
            base = b''
            while True:
                line = data_file.readline()
                if not line or line.startswith(b'>'):
                    break
                base += line.strip()

            base = base.decode(encoding)
            if not mutation_count.get(key):
                writer.writerow([key[0], key[1], 'WT', base[:basesize], 'N/A'])
                mutation_count[key] = 0

            action = cols[2].strip()
            if not action:
                continue
            try:
                base = transform(base, action)
                mutation_count[key] += 1
                writer.writerow([key[0], key[1], 'M{}'.format(mutation_count[key]), base[:basesize], action])
            except InvalidActionFormat:
                sys.stderr.write('[WARN] Line {}: Invalid action format: {}\n'.format(lineno, action))
            except MismatchAction:
                sys.stderr.write('[WARN] Line {}: Mismatched protein in gene {} {}: {}\n'.format(
                    lineno, key[0], key[1], action))

            if verbose:
                sys.stderr.write('[INFO] Line {}: Action "{}" performed.\n'.format(lineno, action))

    sys.stderr.write('Finished.\n')
    return 0


if __name__ == '__main__':
    arguments = docopt(__doc__)
    sys.exit(main(arguments))
